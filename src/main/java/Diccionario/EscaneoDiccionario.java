package Diccionario;

import Analizador.Tokens;
import Analizador.FiltroArchivos;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juani
 */
public class EscaneoDiccionario extends javax.swing.JPanel {

    DefaultTableModel tabla;

    /**
     * Creates new form ADiccionario
     */
    public EscaneoDiccionario() {
        initComponents();
        tabla = new DefaultTableModel();
        String[] titulo = new String[]{"No. Fila", "No. posición", "Categoría", "Token", "Simbolo"};
        tabla.setColumnIdentifiers(titulo);
        tblTabla.setModel(tabla);
        tblTabla.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtEscaneo = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabla = new javax.swing.JTable();
        btnEscanear = new javax.swing.JButton();
        btnArchivo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnGPDF = new javax.swing.JButton();
        btnLimpiarTabla = new javax.swing.JButton();
        btnLimpiarTexto = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtEscaneo.setColumns(20);
        txtEscaneo.setRows(5);
        jScrollPane2.setViewportView(txtEscaneo);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 320, 450));

        tblTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No. Fila", "No. Posicion", "Categoria", "Nombre Token", "Signo"
            }
        ));
        jScrollPane1.setViewportView(tblTabla);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 520, 450));

        btnEscanear.setText("ESCANEAR");
        btnEscanear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscanearActionPerformed(evt);
            }
        });
        add(btnEscanear, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, -1, -1));

        btnArchivo.setText("Abrir archivo");
        btnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoActionPerformed(evt);
            }
        });
        add(btnArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 30, -1, -1));

        btnGPDF.setText("Guardar en PDF");
        btnGPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGPDFActionPerformed(evt);
            }
        });
        add(btnGPDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 30, -1, -1));

        btnLimpiarTabla.setText("Limpiar Tabla");
        btnLimpiarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarTablaActionPerformed(evt);
            }
        });
        add(btnLimpiarTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 30, -1, -1));

        btnLimpiarTexto.setText("Limpiar Texto");
        btnLimpiarTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarTextoActionPerformed(evt);
            }
        });
        add(btnLimpiarTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    //Metodos
    //agregar_Tabla(pos, cont, "Palabra reservada", "Tipo de dato ", signo);
    private void agregar_Tabla(int pos, int cont, String categoria, String nombre, String signo) {
        tabla.addRow(new Object[]{pos, cont, categoria, nombre, signo});
    }

    private void EstiloJfilechooser() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(EscaneoDiccionario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void nuevaTabla() {
        tabla = new DefaultTableModel();
        tblTabla.setModel(tabla);
    }

    private int fpos = 1;

    //Metodo para comparar tablas
    private void agregar_analisis_Tabla(String signo) {
        int filasDiccionario = Diccionario.tablaD.getRowCount();
        //Comparar datos del diccionario y colocarlos en la tabla del analisis
        for (int i = 0; i < filasDiccionario; i++) {
            String categoria = Diccionario.tablaD.getValueAt(i, 1).toString();
            String nombre = Diccionario.tablaD.getValueAt(i, 2).toString();
            String simbolo = Diccionario.tablaD.getValueAt(i, 3).toString();
            if (signo.equals(simbolo)) {
                int fila = fpos++;
                agregar_Tabla(fila, i + 1, categoria, nombre, simbolo);
                break;
            }
        }
    }

    private void guardarEntxt() {
        EstiloJfilechooser();
        //Guardar analisis
        JFileChooser chooser = new JFileChooser("src\\txt y PDF Resultado Escaneo");
        chooser.setDialogTitle("Guardar");
        chooser.setFileFilter(new FiltroArchivos(".txt", "Archivo de texto"));
        int seleccion = chooser.showSaveDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            File archivo = chooser.getSelectedFile();

            try (FileWriter fw = new FileWriter(archivo + ".txt")) {
                BufferedWriter bw = new BufferedWriter(fw);

                for (int i = 0; i < tabla.getRowCount(); i++) {
                    for (int j = 0; j < tabla.getColumnCount(); j++) {
                        bw.write(tabla.getValueAt(i, j).toString() + "\t");
                    }
                    bw.newLine();
                }

                bw.close();
                fw.close();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

            JOptionPane.showMessageDialog(null, "El archivo se guardó correctamente", "Guardar archivo",
                    JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src/Imagenes/icon check.png"));
        }
    }

    private PdfPCell centrartxtTabla(String txt, com.itextpdf.text.Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(txt, font));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        return cell;
    }

    private void guardarEnpdf() {
        EstiloJfilechooser();
        JFileChooser chooser = new JFileChooser("src\\txt y PDF Resultado Escaneo");
        chooser.setFileFilter(new FiltroArchivos(".pdf", "Archivo PDF"));

        if (chooser.showSaveDialog(chooser) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            Document doc = new Document();
            Paragraph titulo;
            try {
                //fuentes de texto
                com.itextpdf.text.Font font = FontFactory.getFont(FontFactory.TIMES_BOLD, 16, BaseColor.BLUE);
                com.itextpdf.text.Font font2 = FontFactory.getFont(FontFactory.TIMES, 12, BaseColor.BLACK);
                com.itextpdf.text.Font font3 = FontFactory.getFont(FontFactory.TIMES_BOLD, 12, BaseColor.BLACK);

                //construccion del pdf
                PdfWriter.getInstance(doc, new FileOutputStream(file + ".pdf"));
                doc.open();
                titulo = new Paragraph("RESULTADO DE ESCANEO DE TOKENS", font);
                titulo.setAlignment(Element.ALIGN_CENTER);
                PdfPTable pdf = new PdfPTable(5);

                pdf.setSpacingBefore(40f);
                pdf.setSpacingAfter(20f);
                pdf.setWidthPercentage(100);
                pdf.setHorizontalAlignment(Element.ALIGN_CENTER);

                pdf.addCell(centrartxtTabla("No. Fila", font3));
                pdf.addCell(centrartxtTabla("No. Posición en la fila", font3));
                pdf.addCell(centrartxtTabla("Categoría", font3));
                pdf.addCell(centrartxtTabla("Nombre del Token", font3));
                pdf.addCell(centrartxtTabla("Signo del Token", font3));

                for (int i = 0; i < tabla.getRowCount(); i++) {

                    String noFila = tabla.getValueAt(i, 0).toString();
                    String noPFila = tabla.getValueAt(i, 1).toString();
                    String categoria = tabla.getValueAt(i, 2).toString();
                    String nombreS = tabla.getValueAt(i, 3).toString();
                    String signo = tabla.getValueAt(i, 4).toString();

                    pdf.addCell(centrartxtTabla(noFila, font2));
                    pdf.addCell(centrartxtTabla(noPFila, font2));
                    pdf.addCell(centrartxtTabla(categoria, font2));
                    pdf.addCell(centrartxtTabla(nombreS, font2));
                    pdf.addCell(centrartxtTabla(signo, font2));

                }
                doc.addTitle("RESULTADO DE ESCANEO DE TOKENS");
                doc.add(titulo);
                doc.add(pdf);

            } catch (DocumentException | FileNotFoundException ex) {
                Logger.getLogger(EscaneoDiccionario.class.getName()).log(Level.SEVERE, null, ex);
            }

            doc.close();
            JOptionPane.showMessageDialog(null, "<html>El archivo: <b>" + file.getName() + "</b> se guardó correctamente</html>", "PDF",
                    JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src/Imagenes/icon Pdf.png"));
        }
    }

    private void abrirArchivo() {
        EstiloJfilechooser();
        // Abrir Archivo
        JFileChooser chooser = new JFileChooser();
        //filtro para buscar archivos
        chooser.setFileFilter(new FiltroArchivos(".txt", "Archivo de texto"));
        chooser.setFileFilter(new FiltroArchivos(".java", "Archivo java"));

        chooser.showOpenDialog(null);
        File archivo = new File(chooser.getSelectedFile().getAbsolutePath());

        try {
            String ST = new String(Files.readAllBytes(archivo.toPath()));
            txtEscaneo.setText(ST);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    private void analizarLexico() throws IOException {
        int cont = 1;
        String expr = (String) txtEscaneo.getText();
        Lexer lexer = new Lexer(new StringReader(expr));
        String signo = "";
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                System.out.println("VACIO");
                return;
            }

            switch (token) {
                case Linea:
                    cont++;
                    break;
                case Comillas:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Cadena_S:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case T_dato:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case If:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Else:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Do:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case While:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case For:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Asignacion:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Suma:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Resta:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Multiplicacion:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Division:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Op_logico:
                    signo = lexer.lexeme;
                    switch (signo) {
                        case "&&":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "||":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "!":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "&":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "|":
                            agregar_analisis_Tabla(signo);
                            break;
                        default:
                            signo = "  < " + lexer.lexeme + " >\n";
                            break;
                    }
                    break;
                case Op_incremento:
                    signo = lexer.lexeme;
                    switch (signo) {
                        case "++":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "--":
                            agregar_analisis_Tabla(signo);
                            break;
                        default:
                            signo = "  < " + lexer.lexeme + " >\n";
                            break;
                    }
                    break;
                case Op_relacional:
                    signo = lexer.lexeme;
                    switch (signo) {
                        case ">":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "<":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "==":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "!=":
                            agregar_analisis_Tabla(signo);
                            break;
                        case ">=":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "<=":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "<<":
                            agregar_analisis_Tabla(signo);
                            break;
                        case ">>":
                            agregar_analisis_Tabla(signo);
                            break;
                        default:
                            signo = "  < " + lexer.lexeme + " >\n";
                            break;
                    }
                    break;
                case Op_atribucion:
                    signo = lexer.lexeme;
                    switch (signo) {
                        case "+=":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "-=":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "*=":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "/=":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "%=":
                            agregar_analisis_Tabla(signo);
                            break;
                        default:
                            signo = "  < " + lexer.lexeme + " >\n";
                            break;
                    }
                    break;
                case Op_booleano:
                    signo = lexer.lexeme;
                    switch (signo) {
                        case "true":
                            agregar_analisis_Tabla(signo);
                            break;
                        case "false":
                            agregar_analisis_Tabla(signo);
                            break;
                        default:
                            signo = "  < " + lexer.lexeme + " >\n";
                            break;
                    }
                    break;
                case Parentesis_a:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Parentesis_c:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Llave_a:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Llave_c:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Corchete_a:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Corchete_c:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Main:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case P_coma:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                //nuevos
                case Modulo:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Punto:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Coma:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Abstract:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Break:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Case:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Catch:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Class:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Const:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Default:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Extends:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Finally:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Switch:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case By_value:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                case Cast:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Operator:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Continue:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Final:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Future:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Outer:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Goto:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Implements:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Import:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Interface:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Native:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Generic:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Rest:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Instanceof:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case New:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Null:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Package:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Private:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Protected:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Public:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Return:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Static:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Super:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Inner:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Var:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Synchronized:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case This:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Threadsafe:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Throw_s:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Transient:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Void:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Identificador:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;
                case Numero:
                    signo = lexer.lexeme;
                    agregar_analisis_Tabla(signo);
                    break;

                case ERROR:
                    signo += "  <Simbolo no definido>\n";
                    break;
                default:
                    signo = "  < " + lexer.lexeme + " >\n";
                    break;
            }
        }
    }

    private void btnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoActionPerformed
        abrirArchivo();
    }//GEN-LAST:event_btnArchivoActionPerformed

    private void btnEscanearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscanearActionPerformed
        try {
            analizarLexico();
        } catch (IOException ex) {
            Logger.getLogger(EscaneoDiccionario.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "Escaneo Terminado");
    }//GEN-LAST:event_btnEscanearActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardarEntxt();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGPDFActionPerformed
        guardarEnpdf();
    }//GEN-LAST:event_btnGPDFActionPerformed

    private void btnLimpiarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarTablaActionPerformed
        tabla.setRowCount(0);
        fpos = 1;
    }//GEN-LAST:event_btnLimpiarTablaActionPerformed

    private void btnLimpiarTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarTextoActionPerformed
        txtEscaneo.setText(null);
    }//GEN-LAST:event_btnLimpiarTextoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArchivo;
    private javax.swing.JButton btnEscanear;
    private javax.swing.JButton btnGPDF;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiarTabla;
    private javax.swing.JButton btnLimpiarTexto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblTabla;
    private javax.swing.JTextArea txtEscaneo;
    // End of variables declaration//GEN-END:variables
}
