package Diccionario;

import Analizador.FiltroArchivos;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juani
 */
public class Diccionario extends javax.swing.JFrame {

    public static DefaultTableModel tablaD;

    public Diccionario() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Diccionario de simbolos");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Imagenes/icon Diccionario.png"))); //icono de la app
        
        tablaD = new DefaultTableModel();
        String[] titulo = new String[]{"No. Fila", "Categoria", "Nombre", "Signo"};
        tablaD.setColumnIdentifiers(titulo);
        tblDiccionario.setModel(tablaD);
    }
    private int cont = 1;
    
    private void EstiloJfilechooser() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR);

        }
    }

    private void agregar_TablaD(int cont, String cat, String nom, String sim) {
        tablaD.addRow(new Object[]{cont, cat, nom, sim});
    }

    private PdfPCell centrartxtTabla(String txt, com.itextpdf.text.Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(txt, font));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_CENTER);
        return cell;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDiccionario = new javax.swing.JTable();
        txtCategoria = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtSigno = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnImportar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnPDF = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnLimpiarT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblDiccionario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDiccionario);

        txtCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCategoriaActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnImportar.setText("Importar");
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnPDF.setText("Guardar en PDF");
        btnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDFActionPerformed(evt);
            }
        });

        jLabel1.setText("Categoria");

        jLabel2.setText("Nombre");

        jLabel3.setText("Simbolo");

        btnLimpiarT.setText("Limpiar Tabla");
        btnLimpiarT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnPDF)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnImportar, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLimpiarT, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSigno, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAgregar))
                            .addComponent(jLabel3))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnLimpiarT)
                        .addGap(28, 28, 28)
                        .addComponent(btnImportar)
                        .addGap(40, 40, 40)
                        .addComponent(btnGuardar)
                        .addGap(26, 26, 26)
                        .addComponent(btnPDF)
                        .addGap(115, 115, 115))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSigno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCategoriaActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        agregar_TablaD(cont, txtCategoria.getText(), txtNombre.getText(), txtSigno.getText());
        cont++;
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        EstiloJfilechooser();
        JFileChooser chooser = new JFileChooser("src\\txt y PDF Diccionario");
        chooser.setDialogTitle("Guardar");
        chooser.setFileFilter(new FiltroArchivos(".txt", "Archivo de texto"));
        int seleccion = chooser.showSaveDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            File archivo = chooser.getSelectedFile();
            try (FileWriter guardar = new FileWriter(archivo + ".txt")) {
                for (int i = 0; i < tablaD.getRowCount(); i++) {
                    for (int j = 0; j < tablaD.getColumnCount(); j++) {
                        guardar.write(tablaD.getValueAt(i, j).toString() + "\n");
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR);
            }

            JOptionPane.showMessageDialog(null, "El archivo se guardó correctamente", "Guardar archivo",
                    JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src/Imagenes/icon check.png"));
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        EstiloJfilechooser();
        //Importar tabla
        String No_Fila, Categoria, Nombre, Simbolo;
        JFileChooser chooser = new JFileChooser("src\\txt y PDF Diccionario");
        chooser.setDialogTitle("Importar");
        chooser.setFileFilter(new FiltroArchivos(".txt", "Archivo de texto"));
        int seleccion = chooser.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = chooser.getSelectedFile();
            try (Scanner linea = new Scanner(archivo)) {
                while (linea.hasNextLine()) {
                    No_Fila = linea.nextLine();
                    Categoria = linea.nextLine();
                    Nombre = linea.nextLine();
                    Simbolo = linea.nextLine();

                    agregar_TablaD(Integer.parseInt(No_Fila), Categoria, Nombre, Simbolo);
                    cont = Integer.parseInt(No_Fila);
                }
                cont++;
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR);
            }
            JOptionPane.showMessageDialog(null, "La Tabla se agregó correctamente", "Importar Tabla",
                    JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src/Imagenes/icon Tabla.png"));
        }
    }//GEN-LAST:event_btnImportarActionPerformed

    private void btnLimpiarTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarTActionPerformed
        tablaD.setRowCount(0);
        cont = 1;
    }//GEN-LAST:event_btnLimpiarTActionPerformed

    private void btnPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDFActionPerformed
        EstiloJfilechooser();
        JFileChooser chooser = new JFileChooser("src\\txt y PDF Diccionario");
        chooser.setFileFilter(new FiltroArchivos(".pdf", "Archivo PDF"));

        if (chooser.showSaveDialog(chooser) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            Document doc = new Document();
            Paragraph titulo;
            try {
                //fuentes de texto
                com.itextpdf.text.Font font = FontFactory.getFont(FontFactory.TIMES_BOLD, 16, BaseColor.BLUE);
                com.itextpdf.text.Font font2 = FontFactory.getFont(FontFactory.TIMES, 12, BaseColor.BLACK);
                com.itextpdf.text.Font font3 = FontFactory.getFont(FontFactory.TIMES_BOLD, 12, BaseColor.BLACK);

                //construccion del pdf
                PdfWriter.getInstance(doc, new FileOutputStream(file + ".pdf"));
                doc.open();
                titulo = new Paragraph("DICCIONARIO DE TOKENS", font);
                titulo.setAlignment(Element.ALIGN_CENTER);
                PdfPTable pdf = new PdfPTable(4);

                pdf.setSpacingBefore(40f);
                pdf.setSpacingAfter(20f);
                pdf.setWidthPercentage(100);
                pdf.setHorizontalAlignment(Element.ALIGN_CENTER);

                pdf.addCell(centrartxtTabla("No. Fila", font3));
                pdf.addCell(centrartxtTabla("Categoría", font3));
                pdf.addCell(centrartxtTabla("Nombre del Token", font3));
                pdf.addCell(centrartxtTabla("Signo del Token", font3));

                for (int i = 0; i < tablaD.getRowCount(); i++) {

                    String noFila = tablaD.getValueAt(i, 0).toString();
                    String categoria = tablaD.getValueAt(i, 1).toString();
                    String nombre = tablaD.getValueAt(i, 2).toString();
                    String simbolo = tablaD.getValueAt(i, 3).toString();

                    pdf.addCell(centrartxtTabla(noFila, font2));
                    pdf.addCell(centrartxtTabla(categoria, font2));
                    pdf.addCell(centrartxtTabla(nombre, font2));
                    pdf.addCell(centrartxtTabla(simbolo, font2));

                }
                doc.addTitle("DICCIONARIO DE TOKENS");
                doc.add(titulo);
                doc.add(pdf);

            } catch (DocumentException | FileNotFoundException ex) {
                Logger.getLogger(EscaneoDiccionario.class.getName()).log(Level.SEVERE, null, ex);
            }

            doc.close();
            JOptionPane.showMessageDialog(null, "<html>El archivo: <b>" + file.getName() + "</b> se guardó correctamente</html>", "PDF",
                    JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src/Imagenes/icon Pdf.png"));
        }
    }//GEN-LAST:event_btnPDFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Diccionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Diccionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Diccionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Diccionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Diccionario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImportar;
    private javax.swing.JButton btnLimpiarT;
    private javax.swing.JButton btnPDF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDiccionario;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtSigno;
    // End of variables declaration//GEN-END:variables
}
